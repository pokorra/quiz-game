{"version":3,"sources":["Hello.js","ButtonsChoice.js","Counter.js","Timer.js","Question.js","Finish.js","questionData.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Hello","props","isHello","className","ButtonsChoice","toggle","toggleButton","startCounting","setCategory","isFinished","setHello","setPointCounter","setTimeCounter","btnChoiceField","values","choice","e","target","name","onClick","Counter","counter","Timer","timeCounter","isTimerActive","useState","visible","setVisible","setTableCounter","tableCounter","tableLength","endOfGame","useEffect","interval","setInterval","prevState","clearInterval","SingleQuest","odp","setOdp","goodAns","item","answer","letTab","setTimerActive","onSubmit","preventDefault","toLowerCase","updateCounter","question","type","value","onChange","AllQuests","pointCounter","number","firstTableEl","items","length","setTableLength","isQuestion","map","key","id","Question","setFinished","quest","Finish","newStart","Kosmos","JS","HisDarkMaterials","Animals","Game","category","setQuestion","setBtnChoiceField","backToGame","setBackToGame","updateCategory","data","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4d33e2f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Hello = (props) => {\r\n\r\n    const isHello = props.isHello;\r\n    return (\r\n    <div className={`hello ${(isHello) ? \"hidden-hello\" : \"\"}`}> \r\n        <div className=\"inner-hello\">\r\n            <h1 className=\"title\">QUIZ WIEDZY</h1>\r\n            <p>gra polega na tym, aby w ciągu 20 sekund odpowiedzieć \r\n            na pytania z wybranej kategorii. sprawdź, co potrafisz!</p>\r\n        </div>\r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\n// po kliknięciu na buttChoice zwija się do góry\r\n\r\nexport default Hello;","import React from 'react';\r\nimport Hello from './Hello';\r\n\r\nconst ButtonsChoice = (props) => {\r\n    const toggle = props.toggleButton;\r\n    const startCounting = props.startCounting;\r\n    const setCategory = props.setCategory;\r\n    const isFinished = props.isFinished;\r\n    const isHello = props.isHello;\r\n    const setHello=props.setHello;\r\n    const setPointCounter = props.setPointCounter;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const btnChoiceField = props.btnChoiceField;\r\n\r\n    const values = {\r\n        Kosmos: 'Kosmos',\r\n        JS: 'JS',\r\n        HDM: 'HisDarkMaterials',\r\n        Animals: 'Animals'\r\n    };\r\n   \r\n    const choice = (e) => {\r\n        setCategory(e.target.name);\r\n        toggle();\r\n        startCounting();\r\n        setPointCounter(0);\r\n        setTimeCounter(20);\r\n    }\r\n\r\n    return (\r\n        <div className={`buttons-choice ${isFinished ? \"hidden-button\" : \"\"} `}>\r\n            <Hello isHello={isHello} setHello={setHello}/>\r\n            <div className ={`choice ${btnChoiceField ? \"short-field\" : \"long-field\"}`}>\r\n                <p>Wybierz kategorię: </p>\r\n                <div className={`${btnChoiceField ? \"\" : \"cat-container\"}`}> \r\n                <button onClick={choice} name={values.Kosmos}>Kosmos</button>\r\n                <button onClick={choice} name={values.JS}>Front-end</button>\r\n                {/* <button onClick={choice} name={values.HDM}>Mroczne materie</button> */}\r\n                <button onClick={choice} name={values.Animals}>Zwierzęta</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonsChoice;","import React from 'react';\r\n\r\nconst Counter = (props) => {\r\n\r\n    return (\r\n        <div className='res-counter'>\r\n            <h2 >wynik: {props.counter} </h2>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Counter;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Timer = (props) => {\r\n    const timeCounter = props.timeCounter;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const isTimerActive = props.isTimerActive;\r\n    const isFinished = props.isFinished;\r\n//początek pop-up:\r\n    const [visible, setVisible] = useState(false);\r\n    const setTableCounter = props.setTableCounter;\r\n    const startCounting = props.startCounting;\r\n//ostatnie pytanie:\r\n    const tableCounter = props.tableCounter;\r\n    const tableLength = props.tableLength;\r\n    const endOfGame = props.endOfGame;\r\n    \r\n    const backToGame = () => {\r\n        setVisible(false);\r\n        setTableCounter(prevState => prevState+1);\r\n        startCounting();\r\n        if (tableCounter +1 === tableLength) {\r\n            endOfGame();\r\n            setTableCounter(0);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        let interval = null;\r\n         if (isTimerActive && timeCounter > 0) {\r\n            interval = setInterval(() => {\r\n                setTimeCounter(prevState => prevState -1);\r\n            }, 1000);\r\n        } else if (isTimerActive && timeCounter === 0) {\r\n            clearInterval(interval);\r\n            //zmiana stanu w pop-upie\r\n            !isFinished && setVisible(true);\r\n        // } else if (!isTimerActive) {\r\n        //     clearInterval(interval);\r\n        //     console.log(timeCounter);\r\n        }\r\n        return () => clearInterval(interval);\r\n       \r\n    }, [isTimerActive, timeCounter]);\r\n\r\n    \r\n    return (\r\n        <div className='timer'>\r\n            <div className={`${visible ? \"pop-up\" : \"hidden\"}`}>\r\n                <h1>KONIEC CZASU </h1>\r\n                <button onClick={backToGame}>wróć do gry</button>\r\n                </div>\r\n            <h2 className=''> czas: {timeCounter} </h2> \r\n            <div className='time-flowing time-one'> </div>\r\n            <div className='time-flowing time-two'> </div>\r\n            <div className='time-flowing time-three'> </div>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Timer;","import React, {useState} from 'react';\r\nimport Counter from './Counter';\r\nimport Timer from './Timer';\r\n\r\nconst SingleQuest = (props) => {\r\n    const [odp, setOdp] = useState('');\r\n\r\n    const goodAns = props.item.answer;\r\n    const tableCounter = props.tableCounter;\r\n    const setTableCounter = props.setTableCounter;\r\n    let letTab = props.letTab;\r\n    const startCounting = props.startCounting;\r\n    const tableLength = props.tableLength;\r\n    const endOfGame = props.endOfGame;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const setTimerActive = props.setTimerActive;\r\n\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        if (goodAns.toLowerCase() === odp.toLowerCase()) {\r\n            props.updateCounter(10);\r\n            setOdp('');\r\n            setTableCounter(prevState=>prevState+1);\r\n        } else {\r\n            setTimerActive(false);\r\n            setVisible(true);\r\n            props.updateCounter(-3);\r\n            setOdp('');\r\n            if (tableCounter +1 === tableLength) {\r\n                endOfGame();\r\n                setTableCounter(0);\r\n                return;\r\n            };\r\n            return;\r\n            // setTableCounter(prevState=>prevState+1);\r\n        }\r\n        \r\n        if (tableCounter +1 === tableLength) {\r\n            endOfGame();\r\n            setTableCounter(0);\r\n            return;\r\n        } else {\r\n            startCounting();\r\n        }\r\n       \r\n    }\r\n    //pop-up\r\n    const [visible, setVisible] = useState(false);\r\n    const backToGame = () => {\r\n        setVisible(false);\r\n        setTableCounter(prevState => prevState+1);\r\n        startCounting();\r\n    }\r\n\r\n    return (\r\n            <div className={`singlequest ${(props.item === letTab) ? \"\" : \"hidden\"}`} >\r\n                <div className={`${visible ? \"pop-up\" : \"hidden\"}`}>\r\n                    <h1>ZŁA ODPOWIEDŹ </h1>\r\n                    <p>dobra odpowiedź to: {goodAns}</p>\r\n                    <p>tracisz 3 punkty</p>\r\n                    <button onClick={backToGame}>wróć do gry</button>\r\n                </div>\r\n                <form onSubmit={submit}>\r\n                <label>\r\n                    {props.item.question}\r\n                    <input\r\n                    type='text'\r\n                    name = {goodAns}\r\n                    value={odp}\r\n                    onChange = {e => setOdp(e.target.value)}\r\n                    />\r\n                    <button type='submit'> ok</button>\r\n                </label>\r\n                </form> \r\n            </div>  \r\n       \r\n            \r\n    )\r\n};\r\n\r\nconst AllQuests = (props) => {\r\n   //zmienne związane z komponentem Counter:\r\n    \r\n    const pointCounter = props.pointCounter;\r\n    const setPointCounter = props.setPointCounter;\r\n    const updateCounter = (number) => {\r\n        setPointCounter(prevState => prevState + number);\r\n    }\r\n\r\n    //zmienne zw. z SingleQuestem:\r\n    const [tableCounter, setTableCounter] = useState(0);\r\n    let firstTableEl = props.items[tableCounter];\r\n    const tableLength = props.items.length;\r\n    const endOfGame = props.endOfGame;\r\n    const isFinished = props.isFinished;\r\n\r\n    const setTableLength = props.setTableLength;\r\n    setTableLength(tableLength);\r\n\r\n    //zmienne związane z Timerem:\r\n    const timeCounter = props.timeCounter;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const isTimerActive = props.isTimerActive;\r\n    const setTimerActive = props.setTimerActive;\r\n    const startCounting = props.startCounting;\r\n\r\n    return (\r\n    <div className={`${props.isQuestion ? 'question-container' : 'hidden'} \r\n                        ${isFinished ? \"hidden\" : \"\"}`}>    \r\n        <div className='questions'>\r\n            {props.items.map(item => (\r\n                <SingleQuest key={item.id} \r\n                    item={item} \r\n                    updateCounter={updateCounter}\r\n                    letTab={firstTableEl}\r\n                    setTableCounter={setTableCounter}\r\n                    tableCounter={tableCounter}\r\n                   \r\n                    timeCounter={timeCounter}\r\n                    setTimeCounter={setTimeCounter}\r\n                    setTimerActive={setTimerActive}\r\n                    startCounting={startCounting}\r\n                    tableLength = {tableLength}\r\n                    endOfGame={endOfGame}\r\n                    />\r\n            ))}\r\n        </div>\r\n\r\n        <Counter counter={pointCounter} />\r\n        <Timer \r\n            timeCounter={timeCounter}\r\n            setTimeCounter={setTimeCounter}\r\n            isTimerActive={isTimerActive}\r\n            isFinished={isFinished}\r\n            setTableCounter={setTableCounter}\r\n            startCounting={startCounting}\r\n            tableCounter={tableCounter}\r\n            tableLength={tableLength}\r\n            endOfGame={endOfGame}\r\n            // setTimerActive={setTimerActive}\r\n            // startCounting={startCounting}\r\n            />\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nconst Question = (props) => {\r\n\r\n    const pointCounter = props.pointCounter;\r\n    const setPointCounter = props.setPointCounter;\r\n\r\n    const isQuestion = props.isQuestion;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const isTimerActive = props.isTimerActive;\r\n    const setTimerActive = props.setTimerActive;\r\n    const startCounting = props.startCounting;\r\n    const timeCounter = props.timeCounter;\r\n    const setFinished = props.setFinished;\r\n    const isFinished = props.isFinished;\r\n    const endOfGame = props.endOfGame;\r\n    const setTableLength = props.setTableLength;\r\n\r\n    // setTableLength = props.items.length);\r\n\r\n    return (\r\n        <>\r\n            <AllQuests \r\n            items={props.quest} \r\n            isQuestion={isQuestion} \r\n            timeCounter={timeCounter}\r\n            setTimeCounter={setTimeCounter}\r\n            isTimerActive={isTimerActive}\r\n            setTimerActive={setTimerActive}\r\n            startCounting={startCounting}\r\n            pointCounter={pointCounter} \r\n            setPointCounter={setPointCounter}\r\n            isFinished={isFinished}\r\n            setFinished={setFinished}\r\n            endOfGame={endOfGame}\r\n            setTableLength={setTableLength}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n\r\nconst Finish = (props) => {\r\n    const isFinished = props.isFinished;\r\n\r\n    const newStart = props.newStart;\r\n    const pointCounter = props.pointCounter;\r\n    const tableLength = props.tableLength*10;\r\n\r\n    const onceMoreToggle = () => {\r\n        newStart();\r\n    }\r\n    return (\r\n        <div className={`${isFinished ? \"finished\" : \"hidden\"} `}>\r\n            <h2>koniec gry!</h2>\r\n            <h1>{`udało ci się zdobyć ${pointCounter} punktów na ${tableLength} możliwych! gratulacje!`}</h1>\r\n            <p>gratuluję wyniku i zachęcam do pogłębiania wiedzy na najróżniejsze tematy.\r\n                pamiętajcie, wiedza bezużyteczna nie istnieje!\r\n            </p>\r\n            <button onClick={onceMoreToggle}>zagraj jeszcze raz</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Finish;","const Kosmos = [\r\n  {\r\n    id: 1,\r\n    question: \"pierścienie tego ciała niebieskiego wystąpiły w tytule książki W. G. Sebalda\",\r\n    answer: \"Saturn\" \r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"nazwa tego batonika inspirowana jest galaktyką, w której się znajdujemy\",\r\n    answer: \"Milky Way\" \r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"żółty karzeł Układu Słonecznego to...\",\r\n    answer: \"Słońce\" \r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"zapoczątkowany w XVI wieku trolling głosił, że księżyc zrobiony jest z...\",\r\n    answer: \"sera\" \r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"największa planeta w Układzie Słonecznym to...\",\r\n    answer: \"Jowisz\" \r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"pierwsze pieski, które wróciły żywe z wyprawy w kosmos, to Biełka i...\",\r\n    answer: \"Striełka\" \r\n  },\r\n  {\r\n    id: 7,\r\n    question: \"pierwszy człowiek na Księżycu miał ma imię Lance, Neil czy Louis?\",\r\n    answer: \"Neil\" \r\n  },\r\n  {\r\n    id: 8,\r\n    question: \"ciało niebieskie nazywane gwiezdnym psem to...\",\r\n    answer: \"Syriusz\" \r\n  }\r\n];\r\n\r\nconst JS =[\r\n  {\r\n    id: 1,\r\n    question: \"Ile elementów może mieć ten sam identyfikator?\",\r\n    answer: \"1\" \r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Jakiej pseudoklasy użyjesz, żeby element zareagował na najechanie myszą?\",\r\n    answer: \"hover\" \r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"Zmienną w ES6 zadeklarujesz za pomocą 'var' czy 'const'?\",\r\n    answer: \"const\" \r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"Jakiego hooka użyjesz, kiedy chcesz w reakcie połączyć się z API?\",\r\n    answer: \"useEffect\" \r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"const fun = '10' + 20 + 5. jaką wartość przyjmuje zmienna fun?\",\r\n    answer: \"10205\" \r\n  },\r\n];\r\n\r\nconst HisDarkMaterials = [\r\n  {\r\n    id: 1,\r\n    question: \"Jak miała na imię dajmona Lee Scoresby'ego?\",\r\n    answer: \"Hester\"\r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Jaki tytuł arystokratyczny nosił ojciec Lyry?\",\r\n    answer: \"lord\"\r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"Stanislaus Grumman to wujek czy ojciec Willa Parry'ego?\",\r\n    answer: \"ojciec\"\r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"Dajmon pani Coulter to złota...?\",\r\n    answer: \"małpa\"\r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"Każdy panserbjorne własnoręcznie wykuwa swą duszę, czyli...\",\r\n    answer: \"pancerz\"\r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"Czy ojciec Coram i Serafina Pekkala mieli dzieci? (t/n)\",\r\n    answer: \"tak\"\r\n  },\r\n ];\r\n\r\nconst Animals = [\r\n  {\r\n    id: 1,\r\n    question: \"czy tygrysy mają pasy również na skórze?\",\r\n    answer: \"tak\"\r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"który ptak potrafi latać wstecz?\",\r\n    answer: \"koliber\"\r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"serce krewetki znajduje się w jej...\",\r\n    answer: \"głowie\"\r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"co jest większe u strusia: oko czy mózg?\",\r\n    answer: \"oko\"\r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"jak nazywa się mieszaniec, potomek lwa i tygrysicy?\",\r\n    answer: \"legrys\"\r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"czy samicom renifera rośnie poroże?\",\r\n    answer: \"tak\"\r\n  },\r\n  {\r\n    id: 7,\r\n    question: \"jakie zwierzę robi kupę w kształcie sześcianów?\",\r\n    answer: \"wombat\"\r\n  },\r\n  {\r\n    id: 8,\r\n    question: \"które zwierzęta mają łaskotki: szczury czy chomiki?\",\r\n    answer: \"szczury\"\r\n  },\r\n  {\r\n    id: 9,\r\n    question: \"kto jest szybszy, gepard czy sokół wędrowny?\",\r\n    answer: \"sokół wędrowny\"\r\n  },\r\n  {\r\n    id: 10,\r\n    question: \"które papugi są najcięższe?\",\r\n    answer: \"kakapo\"\r\n  },\r\n  {\r\n    id: 11,\r\n    question: \"czy orki są mięsożerne?\",\r\n    answer: \"tak\"\r\n  },\r\n]\r\n\r\nexport default {Kosmos, JS, HisDarkMaterials, Animals};","import React, {useState} from 'react';\r\n\r\nimport ButtonsChoice from './ButtonsChoice';\r\nimport Question from './Question';\r\nimport Finish from './Finish';\r\nimport data from './questionData';\r\nimport './Main.scss';\r\n\r\nconst Game = () => {\r\n    const [category, setCategory] = useState('HisDarkMaterials');\r\n    const updateCategory = (name) => {\r\n        setCategory(name);\r\n    }\r\n\r\n//tutaj za pomocą klas zwijam komponent przywitalny Hello i rozwijam \r\n//komponent z właściwą grą - Question\r\n    const [isQuestion, setQuestion] = useState(false);\r\n    const [isHello, setHello] = useState(false);\r\n    const [btnChoiceField, setBtnChoiceField] = useState(false);\r\n    const toggleButton = () => {\r\n        setHello(true);\r\n        setQuestion(true);\r\n        setBtnChoiceField(true);\r\n    } \r\n\r\n// tu licznik punktów, który trzeba było tu wynieść, żeby się resetował\r\n    const [pointCounter, setPointCounter] = useState(0);\r\n//tu ustawiam licznik czasu\r\n    const [timeCounter, setTimeCounter] = useState(20);\r\n    const [isTimerActive, setTimerActive] = useState(false);\r\n    const startCounting = () => {\r\n        setTimerActive(true);\r\n        setTimeCounter(20);\r\n    }\r\n    //setCounter ustawia counter na 15, setActive ustawia counter na \r\n    //aktywny lub nie, startCounting ustawia setActive na true\r\n\r\n    //tu za pomocą klasy rozwijam lub zwijam komponent Finish\r\n    const [isFinished, setFinished] = useState(false);\r\n    const endOfGame = () => {\r\n        setFinished(true);\r\n    }\r\n    const [tableLength, setTableLength] = useState(0);\r\n\r\n    const [backToGame, setBackToGame] = useState(true);\r\n    const goBack = () => {\r\n        setBackToGame(false);\r\n    }\r\n    \r\n    const newStart = () => {\r\n        setQuestion(false);\r\n        setHello(false);\r\n        setFinished(false);\r\n        setBackToGame(true);\r\n        setPointCounter(0);\r\n        setBtnChoiceField(false); \r\n    }\r\n\r\n    return (\r\n        <div className='game-container'>\r\n            <ButtonsChoice \r\n                isHello={isHello} \r\n                setHello={setHello}\r\n                updateCategory={updateCategory}\r\n                setCategory={setCategory}\r\n                toggleButton={toggleButton}\r\n                setTimerActive={setTimerActive}\r\n                startCounting={startCounting}\r\n                setPointCounter={setPointCounter}\r\n                isFinished={isFinished}\r\n                backToGame={backToGame}\r\n                setTimeCounter={setTimeCounter}\r\n                btnChoiceField={btnChoiceField}\r\n                />\r\n            <Question \r\n                quest={data[category]}\r\n                isQuestion={isQuestion}\r\n\r\n                pointCounter={pointCounter} \r\n                setPointCounter={setPointCounter}\r\n\r\n                setTableLength={setTableLength}\r\n                timeCounter={timeCounter}\r\n                setTimeCounter={setTimeCounter}\r\n                isTimerActive={isTimerActive}\r\n                setTimerActive={setTimerActive}\r\n                startCounting={startCounting}\r\n                // zmienna i funkcja do wyświetlania Finishu\r\n                setFinished={setFinished}\r\n                isFinished={isFinished}\r\n                endOfGame={endOfGame}\r\n\r\n                />\r\n            <Finish\r\n                pointCounter={pointCounter} \r\n                isFinished={isFinished}\r\n                newStart={newStart}\r\n                tableLength={tableLength}\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
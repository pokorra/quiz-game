{"version":3,"sources":["Hello.js","ButtonsChoice.js","Counter.js","Timer.js","Question.js","Finish.js","questionData.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Hello","props","isHello","className","ButtonsChoice","toggle","toggleButton","startCounting","setCategory","isFinished","setHello","setPointCounter","values","choice","e","target","name","onClick","Counter","counter","Timer","timeCounter","setTimeCounter","isTimerActive","useState","visible","setVisible","setTableCounter","useEffect","interval","setInterval","prevState","clearInterval","console","log","SingleQuest","odp","setOdp","goodAns","item","answer","tableCounter","letTab","tableLength","endOfGame","setTimerActive","onSubmit","preventDefault","updateCounter","question","type","value","onChange","AllQuests","pointCounter","number","firstTableEl","items","length","setTableLength","isQuestion","map","key","id","Question","setFinished","quest","Finish","newStart","Wybory","JS","HisDarkMaterials","Animals","Game","category","setQuestion","backToGame","setBackToGame","updateCategory","data","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25dbb53b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Hello = (props) => {\r\n\r\n    const isHello = props.isHello;\r\n    return (\r\n    <div className={`hello ${(isHello) ? \"hidden-hello\" : \"\"}`}> \r\n        <div className=\"inner-hello\">\r\n            <h1 className=\"title\">QUIZ WIEDZY</h1>\r\n            <p>gra polega na tym, aby w ciągu 20 sekund odpowiedzieć \r\n            na pytania z wybranej kategorii. sprawdź, co potrafisz!</p>\r\n        </div>\r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\n// po kliknięciu na buttChoice zwija się do góry\r\n\r\nexport default Hello;","import React from 'react';\r\nimport Hello from './Hello';\r\n\r\nconst ButtonsChoice = (props) => {\r\n    const toggle = props.toggleButton;\r\n    const startCounting = props.startCounting;\r\n    const setCategory = props.setCategory;\r\n    const isFinished = props.isFinished;\r\n    const isHello = props.isHello;\r\n    const setHello=props.setHello;\r\n    const setPointCounter = props.setPointCounter;\r\n\r\n    const values = {\r\n        Wybory: 'Wybory',\r\n        JS: 'JS',\r\n        HDM: 'HisDarkMaterials',\r\n        Animals: 'Animals'\r\n    };\r\n   \r\n    const choice = (e) => {\r\n        setCategory(e.target.name);\r\n        toggle();\r\n        startCounting();\r\n        setPointCounter(0);\r\n    }\r\n\r\n    return (\r\n        <div className={`buttons-choice ${isFinished ? \"hidden-button\" : \"\"}`}> \r\n            <Hello isHello={isHello} setHello={setHello}/>\r\n            <div className=\"choice\">\r\n                <p>Wybierz kategorię: </p>\r\n                <button onClick={choice} name={values.Wybory}>Wybory 2020</button>\r\n                <button onClick={choice} name={values.JS}>Front-end</button>\r\n                <button onClick={choice} name={values.HDM}>Mroczne materie</button>\r\n                <button onClick={choice} name={values.Animals}>Zwierzęta</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonsChoice;","import React from 'react';\r\n\r\nconst Counter = (props) => {\r\n\r\n    return (\r\n        <div className='res-counter'>\r\n            <h2 >wynik: {props.counter} </h2>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Counter;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Timer = (props) => {\r\n    const timeCounter = props.timeCounter;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const isTimerActive = props.isTimerActive;\r\n    const isFinished = props.isFinished;\r\n//początek pop-up:\r\n    const [visible, setVisible] = useState(false);\r\n    const setTableCounter = props.setTableCounter;\r\n    const startCounting = props.startCounting;\r\n    \r\n    const backToGame = () => {\r\n        setVisible(false);\r\n        setTableCounter(prevState => prevState+1);\r\n        startCounting();\r\n    }\r\n    useEffect(() => {\r\n        let interval = null;\r\n       \r\n        if (isTimerActive && timeCounter > 0) {\r\n            interval = setInterval(() => {\r\n                setTimeCounter(prevState => prevState -1);\r\n            }, 1000);\r\n        } else if (isTimerActive && timeCounter === 0) {\r\n            clearInterval(interval);\r\n            //zmiana stanu w pop-upie\r\n            !isFinished && setVisible(true);\r\n            console.log(timeCounter);\r\n        // } else if (!isTimerActive) {\r\n        //     clearInterval(interval);\r\n        //     console.log(timeCounter);\r\n        }\r\n        return () => clearInterval(interval);\r\n       \r\n    }, [isTimerActive, timeCounter]);\r\n\r\n    \r\n    return (\r\n        <div className='timer'>\r\n            <div className={`${visible ? \"pop-up\" : \"hidden\"}`}>\r\n                <h1>KONIEC CZASU </h1>\r\n                <button onClick={backToGame}>wróć do gry</button>\r\n                </div>\r\n            <h2 className=''> czas: {timeCounter} </h2> \r\n            <div className='time-flowing time-one'> </div>\r\n            <div className='time-flowing time-two'> </div>\r\n            <div className='time-flowing time-three'> </div>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Timer;","import React, {useState} from 'react';\r\nimport Counter from './Counter';\r\nimport Timer from './Timer';\r\n\r\nconst SingleQuest = (props) => {\r\n    const [odp, setOdp] = useState('');\r\n\r\n    const goodAns = props.item.answer;\r\n    const tableCounter = props.tableCounter;\r\n    const setTableCounter = props.setTableCounter;\r\n    let letTab = props.letTab;\r\n    const startCounting = props.startCounting;\r\n    const tableLength = props.tableLength;\r\n    const endOfGame = props.endOfGame;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const setTimerActive = props.setTimerActive;\r\n\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        if (goodAns === odp) {\r\n            props.updateCounter(10);\r\n            setOdp('');\r\n            setTableCounter(prevState=>prevState+1);\r\n        } else {\r\n            // setTimeCounter(0);\r\n            console.log(tableCounter);\r\n            setTimerActive(false);\r\n            setVisible(true);\r\n            props.updateCounter(-3);\r\n            setOdp('');\r\n            if (tableCounter +1 === tableLength) {\r\n                endOfGame();\r\n                setTableCounter(0);\r\n                return;\r\n            };\r\n            return;\r\n            // setTableCounter(prevState=>prevState+1);\r\n        }\r\n        \r\n        if (tableCounter +1 === tableLength) {\r\n            endOfGame();\r\n            setTableCounter(0);\r\n            return;\r\n        } else {\r\n            startCounting();\r\n        }\r\n       \r\n    }\r\n    //pop-up\r\n    const [visible, setVisible] = useState(false);\r\n    const backToGame = () => {\r\n        setVisible(false);\r\n        setTableCounter(prevState => prevState+1);\r\n        startCounting();\r\n    }\r\n\r\n    return (\r\n            <div className={`singlequest ${(props.item === letTab) ? \"\" : \"hidden\"}`} >\r\n                <div className={`${visible ? \"pop-up\" : \"hidden\"}`}>\r\n                    <h1>ZŁA ODPOWIEDŹ </h1>\r\n                    <p>dobra odpowiedź to: {goodAns}</p>\r\n                    <p>tracisz 3 punkty</p>\r\n                    <button onClick={backToGame}>wróć do gry</button>\r\n                </div>\r\n                <form onSubmit={submit}>\r\n                <label>\r\n                    {props.item.question}\r\n                    <input\r\n                    type='text'\r\n                    name = {goodAns}\r\n                    value={odp}\r\n                    onChange = {e => setOdp(e.target.value)}\r\n                    />\r\n                    <button type='submit'> ok</button>\r\n                </label>\r\n                </form> \r\n            </div>  \r\n       \r\n            \r\n    )\r\n};\r\n\r\nconst AllQuests = (props) => {\r\n   //zmienne związane z komponentem Counter:\r\n    \r\n    const pointCounter = props.pointCounter;\r\n    const setPointCounter = props.setPointCounter;\r\n    const updateCounter = (number) => {\r\n        setPointCounter(prevState => prevState + number);\r\n    }\r\n\r\n    //zmienne zw. z SingleQuestem:\r\n    const [tableCounter, setTableCounter] = useState(0);\r\n    let firstTableEl = props.items[tableCounter];\r\n    const tableLength = props.items.length;\r\n\r\n    const endOfGame = props.endOfGame;\r\n    const isFinished = props.isFinished;\r\n\r\n    const setTableLength = props.setTableLength;\r\n    setTableLength(tableLength);\r\n\r\n    //zmienne związane z Timerem:\r\n    const timeCounter = props.timeCounter;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const isTimerActive = props.isTimerActive;\r\n    const setTimerActive = props.setTimerActive;\r\n    const startCounting = props.startCounting;\r\n\r\n    return (\r\n    <div className={`${props.isQuestion ? 'question-container' : 'hidden'} \r\n                        ${isFinished ? \"hidden\" : \"\"}`}>    \r\n        <div className='questions'>\r\n            {props.items.map(item => (\r\n                <SingleQuest key={item.id} \r\n                    item={item} \r\n                    updateCounter={updateCounter}\r\n                    letTab={firstTableEl}\r\n                    setTableCounter={setTableCounter}\r\n                    tableCounter={tableCounter}\r\n                   \r\n                    timeCounter={timeCounter}\r\n                    setTimeCounter={setTimeCounter}\r\n                    setTimerActive={setTimerActive}\r\n                    startCounting={startCounting}\r\n                    tableLength = {tableLength}\r\n                    endOfGame={endOfGame}\r\n                    // setTableLength={setTableLength}\r\n                    />\r\n            ))}\r\n        </div>\r\n\r\n        <Counter counter={pointCounter} />\r\n        <Timer \r\n            timeCounter={timeCounter}\r\n            setTimeCounter={setTimeCounter}\r\n            isTimerActive={isTimerActive}\r\n            isFinished={isFinished}\r\n            setTableCounter={setTableCounter}\r\n            startCounting={startCounting}\r\n            // setTimerActive={setTimerActive}\r\n            // startCounting={startCounting}\r\n            />\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nconst Question = (props) => {\r\n\r\n    const pointCounter = props.pointCounter;\r\n    const setPointCounter = props.setPointCounter;\r\n\r\n    const isQuestion = props.isQuestion;\r\n    const setTimeCounter = props.setTimeCounter;\r\n    const isTimerActive = props.isTimerActive;\r\n    const setTimerActive = props.setTimerActive;\r\n    const startCounting = props.startCounting;\r\n    const timeCounter = props.timeCounter;\r\n    const setFinished = props.setFinished;\r\n    const isFinished = props.isFinished;\r\n    const endOfGame = props.endOfGame;\r\n    const setTableLength = props.setTableLength;\r\n\r\n    // setTableLength = props.items.length);\r\n\r\n    return (\r\n        <>\r\n            <AllQuests \r\n            items={props.quest} \r\n            isQuestion={isQuestion} \r\n            timeCounter={timeCounter}\r\n            setTimeCounter={setTimeCounter}\r\n            isTimerActive={isTimerActive}\r\n            setTimerActive={setTimerActive}\r\n            startCounting={startCounting}\r\n            pointCounter={pointCounter} \r\n            setPointCounter={setPointCounter}\r\n            isFinished={isFinished}\r\n            setFinished={setFinished}\r\n            endOfGame={endOfGame}\r\n            setTableLength={setTableLength}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n\r\nconst Finish = (props) => {\r\n    const isFinished = props.isFinished;\r\n\r\n    const newStart = props.newStart;\r\n    const pointCounter = props.pointCounter;\r\n    const tableLength = props.tableLength*10;\r\n\r\n    const onceMoreToggle = () => {\r\n        newStart();\r\n    }\r\n    return (\r\n        <div className={`${isFinished ? \"finished\" : \"hidden\"} `}>\r\n            <h2>koniec gry!</h2>\r\n            <h1>{`udało ci się zdobyć ${pointCounter} punktów na ${tableLength} możliwych! gratulacje!`}</h1>\r\n            <p>niech każdy w skrytości serca oceni, czy to dobry wynik, \r\n                i czy można coś jeszcze poprawić. ja ze swojej strony mogę podziękować za wyśmienitą zabawę xd</p>\r\n            <button onClick={onceMoreToggle}>zagraj jeszcze raz</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Finish;","const Wybory = [\r\n  {\r\n    id: 1,\r\n    question: \"Który kandydat należy do Kongresu Nowej Prawicy?\",\r\n    answer: \"Żółtek\" \r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Który kandydat jest z zawodu lekarzem?\",\r\n    answer: \"Kosiniak-Kamysz\" \r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"Który kandydat jest najmłodszy?\",\r\n    answer: \"Bosak\" \r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"Który kandydat wygląda jak gruby Ryszard Petru?\",\r\n    answer: \"Piotrowski\" \r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"Który kandydat jest synem słynnego muzyka jazzowego?\",\r\n    answer: \"Trzaskowski\" \r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"Który kandydat ma na drugie Sebastian?\",\r\n    answer: \"Duda\" \r\n  },\r\n  {\r\n    id: 7,\r\n    question: \"Który kandydat miał własne wydawnictwo książkowe?\",\r\n    answer: \"Biedroń\" \r\n  },\r\n  {\r\n    id: 8,\r\n    question: \"Który kandydat nie powie o sobie 'mucha nie siada'? xd\",\r\n    answer: \"Witkowski\" \r\n  },\r\n  {\r\n    id: 9,\r\n    question: \"Który kandydat świadczy usługi z zakresu m.in. IT?\",\r\n    answer: \"Tanajno\" \r\n  },\r\n  {\r\n    id: 10,\r\n    question: \"Który kandydat jest właścicielem browaru Lwówek?\",\r\n    answer: \"Jakubiak\" \r\n  },\r\n  {\r\n    id: 11,\r\n    question: \"Który kandydat płakał jak czytał konstytucję? xd\",\r\n    answer: \"Hołownia\" \r\n  },\r\n];\r\n\r\nconst JS =[\r\n  {\r\n    id: 1,\r\n    question: \"Ile elementów może mieć ten sam identyfikator?\",\r\n    answer: \"1\" \r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Jakiej pseudoklasy użyjesz, żeby element zareagował na najechanie myszą?\",\r\n    answer: \"hover\" \r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"Zmienną w ES6 zadeklarujesz za pomocą 'var' czy 'const'?\",\r\n    answer: \"const\" \r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"Jakiego hooka użyjesz, kiedy chcesz w reakcie połączyć się z API?\",\r\n    answer: \"useEffect\" \r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"const fun = '10' + 20 + 5. jaką wartość przyjmuje zmienna fun?\",\r\n    answer: \"10205\" \r\n  },\r\n];\r\n\r\nconst HisDarkMaterials = [\r\n  {\r\n    id: 1,\r\n    question: \"Jak miała na imię dajmona Lee Scoresby'ego?\",\r\n    answer: \"Hester\"\r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Jaki tytuł arystokratyczny nosił ojciec Lyry?\",\r\n    answer: \"lord\"\r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"Stanislaus Grumman to wujek czy ojciec Willa Parry'ego?\",\r\n    answer: \"ojciec\"\r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"Dajmon pani Coulter to złota...?\",\r\n    answer: \"małpa\"\r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"Każdy panserbjorne własnoręcznie wykuwa swą duszę, czyli...\",\r\n    answer: \"pancerz\"\r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"Czy ojciec Coram i Serafina Pekkala mieli dzieci? (t/n)\",\r\n    answer: \"tak\"\r\n  },\r\n ];\r\n\r\nconst Animals = [\r\n  {\r\n    id: 1,\r\n    question: \"czy tygrysy mają pasy również na skórze?\",\r\n    answer: \"tak\"\r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"który ptak potrafi latać wstecz?\",\r\n    answer: \"koliber\"\r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"serce krewetki znajduje się w jej...\",\r\n    answer: \"głowie\"\r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"co jest większe u strusia: oko czy mózg?\",\r\n    answer: \"oko\"\r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"jak nazywa się mieszaniec, potomek lwa i tygrysicy?\",\r\n    answer: \"legrys\"\r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"czy samicom renifera rośnie poroże?\",\r\n    answer: \"tak\"\r\n  },\r\n  {\r\n    id: 7,\r\n    question: \"jakie zwierzę robi kupę w kształcie sześcianów?\",\r\n    answer: \"wombat\"\r\n  },\r\n  {\r\n    id: 8,\r\n    question: \"które zwierzęta mają łaskotki: szczury czy chomiki?\",\r\n    answer: \"szczury\"\r\n  },\r\n  {\r\n    id: 9,\r\n    question: \"kto jest szybszy, gepard czy sokół wędrowny?\",\r\n    answer: \"sokół wędrowny\"\r\n  },\r\n  {\r\n    id: 10,\r\n    question: \"które papugi są najcięższe?\",\r\n    answer: \"kakapo\"\r\n  },\r\n  {\r\n    id: 11,\r\n    question: \"czy orki są mięsożerne?\",\r\n    answer: \"tak\"\r\n  },\r\n]\r\n\r\nexport default {Wybory, JS, HisDarkMaterials, Animals};","import React, {useState} from 'react';\r\n\r\nimport ButtonsChoice from './ButtonsChoice';\r\nimport Question from './Question';\r\nimport Finish from './Finish';\r\nimport data from './questionData';\r\nimport './Main.scss';\r\n\r\nconst Game = () => {\r\n    const [category, setCategory] = useState('HisDarkMaterials');\r\n    const updateCategory = (name) => {\r\n        setCategory(name);\r\n    }\r\n\r\n//tutaj za pomocą klas zwijam komponent przywitalny Hello i rozwijam \r\n//komponent z właściwą grą - Question\r\n    const [isQuestion, setQuestion] = useState(false);\r\n    const [isHello, setHello] = useState(false);\r\n    const toggleButton = () => {\r\n        setHello(true);\r\n        setQuestion(true);\r\n    } \r\n\r\n// tu licznik punktów, który trzeba było tu wynieść, żeby się resetował\r\n    const [pointCounter, setPointCounter] = useState(0);\r\n//tu ustawiam licznik czasu\r\n    const [timeCounter, setTimeCounter] = useState(20);\r\n    const [isTimerActive, setTimerActive] = useState(false);\r\n    const startCounting = () => {\r\n        setTimerActive(true);\r\n        setTimeCounter(20);\r\n    }\r\n    //setCounter ustawia counter na 15, setActive ustawia counter na \r\n    //aktywny lub nie, startCounting ustawia setActive na true\r\n\r\n    //tu za pomocą klasy rozwijam lub zwijam komponent Finish\r\n    const [isFinished, setFinished] = useState(false);\r\n    const endOfGame = () => {\r\n        setFinished(true);\r\n    }\r\n    const [tableLength, setTableLength] = useState(0);\r\n\r\n    const [backToGame, setBackToGame] = useState(true);\r\n    const goBack = () => {\r\n        setBackToGame(false);\r\n    }\r\n    \r\n    const newStart = () => {\r\n        setQuestion(false);\r\n        setHello(false);\r\n        setFinished(false);\r\n        setBackToGame(true);\r\n        setPointCounter(0);   \r\n    }\r\n\r\n    return (\r\n        <div className='game-container'>\r\n            <ButtonsChoice \r\n                isHello={isHello} \r\n                setHello={setHello}\r\n                updateCategory={updateCategory}\r\n                setCategory={setCategory}\r\n                toggleButton={toggleButton}\r\n                setTimerActive={setTimerActive}\r\n                startCounting={startCounting}\r\n                setPointCounter={setPointCounter}\r\n                isFinished={isFinished}\r\n                backToGame={backToGame}\r\n                />\r\n            <Question \r\n                quest={data[category]}\r\n                isQuestion={isQuestion}\r\n\r\n                pointCounter={pointCounter} \r\n                setPointCounter={setPointCounter}\r\n\r\n                setTableLength={setTableLength}\r\n                timeCounter={timeCounter}\r\n                setTimeCounter={setTimeCounter}\r\n                isTimerActive={isTimerActive}\r\n                setTimerActive={setTimerActive}\r\n                startCounting={startCounting}\r\n                // zmienna i funkcja do wyświetlania Finishu\r\n                setFinished={setFinished}\r\n                isFinished={isFinished}\r\n                endOfGame={endOfGame}\r\n\r\n                />\r\n            <Finish\r\n                pointCounter={pointCounter} \r\n                isFinished={isFinished}\r\n                newStart={newStart}\r\n                tableLength={tableLength}\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
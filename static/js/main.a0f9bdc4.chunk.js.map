{"version":3,"sources":["Hello.js","ButtonsChoice.js","SingleQuest.js","Counter.js","Timer.js","Question.js","Finish.js","questionData.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Hello","props","isHello","className","ButtonsChoice","toggleButton","startCounting","setCategory","isFinished","setHello","setPointCounter","values","setTimeCounter","btnChoiceField","choice","e","console","log","target","name","onClick","SingleQuest","item","updateCounter","letTab","setTableCounter","tableCounter","setTimerActive","tableLength","endOfGame","useState","odp","setOdp","goodAns","answer","visible","setVisible","prevState","onSubmit","preventDefault","toLowerCase","question","type","value","onChange","Counter","counter","Timer","timeCounter","isTimerActive","useEffect","interval","setInterval","clearInterval","Question","items","pointCounter","isQuestion","setFinished","setTableLength","number","firstTableEl","length","map","key","id","Finish","newStart","maxPoints","Kosmos","JS","HisDarkMaterials","Animals","Game","category","data","setQuestion","setBtnChoiceField","backToGame","setBackToGame","updateCategory","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a0f9bdc4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Hello = (props) => {\r\n\r\n    const isHello = props.isHello;\r\n    return (\r\n    <div className={`hello ${(isHello) ? \"hidden-hello\" : \"\"}`}> \r\n        <div className=\"inner-hello\">\r\n            <h1 className=\"title\">QUIZ WIEDZY</h1>\r\n            <p>gra polega na tym, aby w ciągu 20 sekund odpowiedzieć \r\n            na pytania z wybranej kategorii. sprawdź, co potrafisz!</p>\r\n        </div>\r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\n// po kliknięciu na buttChoice zwija się do góry\r\n\r\nexport default Hello;","import React from 'react';\r\nimport Hello from './Hello';\r\n\r\nconst ButtonsChoice = ({toggleButton, startCounting, setCategory, isFinished, isHello, setHello, setPointCounter, setTimeCounter, btnChoiceField}) => {\r\n\r\n    const values = {\r\n        Kosmos: 'Kosmos',\r\n        JS: 'JS',\r\n        HDM: 'HisDarkMaterials',\r\n        Animals: 'Animals'\r\n    };\r\n   \r\n    const choice = (e) => {\r\n        console.log('kliknięto choice');\r\n        setCategory(e.target.name);\r\n        toggleButton();\r\n        startCounting();\r\n        setPointCounter(0);\r\n        // trzeba jeszcze wyzerować nr pytania!;\r\n    }\r\n\r\n    return (\r\n        <div className={`buttons-choice ${isFinished ? \"hidden\" : \"\"} `}>\r\n            <Hello isHello={isHello} setHello={setHello}/>\r\n            {/* <div className ={`choice ${btnChoiceField ? \"short-field\" : \"long-field\"}`}> */}\r\n            <div className ={`choice`}>\r\n                <p>wybierz kategorię: </p>\r\n                {/* <div className={`${btnChoiceField ? \"\" : \"cat-container\"}`}>  */}\r\n                <div className=\"cat-container\">\r\n                    <button onClick={choice} name={values.Kosmos}>KOSMOS</button>\r\n                    <button onClick={choice} name={values.JS}>FRONT-END</button>\r\n                    {/* <button onClick={choice} name={values.HDM}>Mroczne materie</button> */}\r\n                    <button onClick={choice} name={values.Animals}>ZWIERZĘTA</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n//czemu służy btnChoiceField?\r\n\r\nexport default ButtonsChoice;","import React, {useState} from 'react';\r\n\r\nconst SingleQuest = ({item, updateCounter, letTab, setTableCounter, \r\n    tableCounter, setTimerActive, startCounting, \r\n    tableLength, endOfGame}) => {\r\n\r\n    const [odp, setOdp] = useState('');\r\n\r\n    const goodAns = item.answer;\r\n\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        if (goodAns.toLowerCase() === odp.toLowerCase()) {\r\n            updateCounter(10);\r\n            setOdp('');\r\n            setTableCounter(prevState=>prevState+1);\r\n        } else {\r\n            setTimerActive(false);\r\n            setVisible(true);\r\n            updateCounter(-3);\r\n            setOdp('');\r\n            if (tableCounter +1 === tableLength) {\r\n                endOfGame();\r\n                setTableCounter(0);\r\n                return;\r\n            };\r\n            return;\r\n            // setTableCounter(prevState=>prevState+1);\r\n        }\r\n        \r\n        if (tableCounter +1 === tableLength) {\r\n            endOfGame();\r\n            setTableCounter(0);\r\n            return;\r\n        } else {\r\n            startCounting();\r\n        }\r\n       \r\n    }\r\n    //pop-up\r\n    const [visible, setVisible] = useState(false);\r\n    const backToGame = () => {\r\n        setVisible(false);\r\n        setTableCounter(prevState => prevState+1);\r\n        startCounting();\r\n    }\r\n\r\n    return (\r\n            <div className={`singlequest ${(item === letTab) ? \"\" : \"hidden\"}`} >\r\n                <div className={`${visible ? \"pop-up\" : \"hidden\"}`}>\r\n                    <h1>ZŁA ODPOWIEDŹ </h1>\r\n                    <p>dobra odpowiedź to: {goodAns}</p>\r\n                    <p>tracisz 3 punkty</p>\r\n                    <button onClick={backToGame}>wróć do gry</button>\r\n                </div>\r\n                <form onSubmit={submit}>\r\n                <label>\r\n                   {item.question} \r\n                   <div>\r\n                    <input\r\n                        type='text'\r\n                        // key={key}\r\n                        name = {goodAns}\r\n                        value={odp}\r\n                        onChange = {e => setOdp(e.target.value)}\r\n                        />\r\n                        <button type='submit'> ok</button>\r\n                   </div>\r\n                   \r\n                </label>\r\n                </form> \r\n            </div>         \r\n    )\r\n};\r\n\r\nexport default SingleQuest;","import React from 'react';\r\n\r\nconst Counter = ({counter}) => {\r\n\r\n    return (\r\n        <div className='res-counter'>\r\n            <h2 >wynik: {counter} </h2>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Counter;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Timer = ({timeCounter, setTimeCounter, isTimerActive, isFinished,\r\n                setTableCounter, startCounting, tableCounter, tableLength, endOfGame}) => {\r\n\r\n//początek pop-up:\r\n    const [visible, setVisible] = useState(false);\r\n\r\n//ostatnie pytanie:\r\n    //  tableCounter, tableLength, endOfGame \r\n    \r\n    const backToGame = () => {\r\n        setVisible(false);\r\n        setTableCounter(prevState => prevState+1);\r\n        startCounting();\r\n        if (tableCounter +1 === tableLength) {\r\n            endOfGame();\r\n            setTableCounter(0);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        let interval = null;\r\n         if (isTimerActive && timeCounter > 0) {\r\n            interval = setInterval(() => {\r\n                setTimeCounter(prevState => prevState -1);\r\n            }, 1000);\r\n        } else if (isTimerActive && timeCounter === 0) {\r\n            clearInterval(interval);\r\n            //zmiana stanu w pop-upie\r\n            !isFinished && setVisible(true);\r\n        // } else if (!isTimerActive) {\r\n        //     clearInterval(interval);\r\n        //     console.log(timeCounter);\r\n        }\r\n        return () => clearInterval(interval);\r\n       \r\n    }, [isTimerActive, timeCounter, isFinished, setTimeCounter]);\r\n\r\n    \r\n    return (\r\n        <div className='timer'>\r\n            <div className={`${visible ? \"pop-up\" : \"hidden\"}`}>\r\n                <h1>KONIEC CZASU </h1>\r\n                <button onClick={backToGame}>wróć do gry</button>\r\n                </div>\r\n            <h2> czas: {timeCounter} </h2> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React, {useState} from 'react';\r\nimport SingleQuest from './SingleQuest';\r\nimport Counter from './Counter';\r\nimport Timer from './Timer';\r\n\r\n\r\n\r\nconst Question = ({items, pointCounter, setPointCounter, isQuestion, setTimeCounter, isTimerActive,\r\n                    setTimerActive, startCounting, timeCounter, setFinished, isFinished,\r\n                    endOfGame, setTableLength}) => {\r\n\r\n    // const items = data[category];\r\n   //zmienne związane z komponentem Counter\r\n    const updateCounter = (number) => {\r\n        setPointCounter(prevState => prevState + number);\r\n    }\r\n\r\n    //zmienne zw. z SingleQuestem:\r\n    const [tableCounter, setTableCounter] = useState(0);\r\n    let firstTableEl = items[tableCounter];\r\n    const tableLength = items.length;\r\n    setTableLength(tableLength);\r\n\r\n    //do Timera przekazać propsy bez modyfikacji\r\n\r\n    return (\r\n    <div className={`${isQuestion ? 'question-container' : 'hidden'} \r\n                        ${isFinished ? \"hidden\" : \"\"}`}>    \r\n        <div className='questions'>\r\n            {items.map(item => (\r\n                <SingleQuest \r\n                    key={item.id} \r\n                    item={item} \r\n                    updateCounter={updateCounter}\r\n                    letTab={firstTableEl}\r\n                    setTableCounter={setTableCounter}\r\n                    tableCounter={tableCounter}\r\n                    setTimerActive={setTimerActive}\r\n                    startCounting={startCounting}\r\n                    tableLength = {tableLength}\r\n                    endOfGame={endOfGame}\r\n                    />\r\n            ))}\r\n        </div>\r\n\r\n        <Counter counter={pointCounter} />\r\n        <Timer \r\n            timeCounter={timeCounter}\r\n            setTimeCounter={setTimeCounter}\r\n            isTimerActive={isTimerActive}\r\n            isFinished={isFinished}\r\n            setTableCounter={setTableCounter}\r\n            startCounting={startCounting}\r\n            tableCounter={tableCounter}\r\n            tableLength={tableLength}\r\n            endOfGame={endOfGame}\r\n            />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\n\r\nconst Finish = ({isFinished, newStart, pointCounter, tableLength}) => {\r\n\r\n    const maxPoints = tableLength*10;\r\n\r\n    const onceMoreToggle = () => {\r\n        newStart();\r\n    }\r\n    return (\r\n        <div className={`${isFinished ? \"finished\" : \"hidden\"} `}>\r\n            <h2>koniec gry!</h2>\r\n            <h3>{`udało ci się zdobyć ${pointCounter} punktów na ${maxPoints} możliwych! gratulacje!`}</h3>\r\n            <p>gratuluję wyniku i zachęcam do pogłębiania wiedzy na najróżniejsze tematy.\r\n                pamiętajcie, wiedza bezużyteczna nie istnieje!\r\n            </p>\r\n            <button onClick={onceMoreToggle}>zagraj jeszcze raz</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Finish;","const Kosmos = [\r\n  {\r\n    id: 1,\r\n    question: \"pierścienie tego ciała niebieskiego wystąpiły w tytule książki W. G. Sebalda\",\r\n    answer: \"Saturn\" \r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"nazwa tego batonika inspirowana jest galaktyką, w której się znajdujemy\",\r\n    answer: \"Milky Way\" \r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"żółty karzeł Układu Słonecznego to...\",\r\n    answer: \"Słońce\" \r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"zapoczątkowany w XVI wieku trolling głosił, że księżyc zrobiony jest z...\",\r\n    answer: \"sera\" \r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"największa planeta w Układzie Słonecznym to...\",\r\n    answer: \"Jowisz\" \r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"pierwsze pieski, które wróciły żywe z wyprawy w kosmos, to Biełka i...\",\r\n    answer: \"Striełka\" \r\n  },\r\n  {\r\n    id: 7,\r\n    question: \"pierwszy człowiek na Księżycu miał ma imię Lance, Neil czy Louis?\",\r\n    answer: \"Neil\" \r\n  },\r\n  {\r\n    id: 8,\r\n    question: \"ciało niebieskie nazywane gwiezdnym psem to...\",\r\n    answer: \"Syriusz\" \r\n  }\r\n];\r\n\r\nconst JS =[\r\n  {\r\n    id: 1,\r\n    question: \"Ile elementów może mieć ten sam identyfikator?\",\r\n    answer: \"1\" \r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Jakiej pseudoklasy użyjesz, żeby element zareagował na najechanie myszą?\",\r\n    answer: \"hover\" \r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"Zmienną w ES6 zadeklarujesz za pomocą 'var' czy 'const'?\",\r\n    answer: \"const\" \r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"Jakiego hooka użyjesz, kiedy chcesz w reakcie połączyć się z API?\",\r\n    answer: \"useEffect\" \r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"const fun = '10' + 20 + 5. jaką wartość przyjmuje zmienna fun?\",\r\n    answer: \"10205\" \r\n  },\r\n];\r\n\r\nconst HisDarkMaterials = [\r\n  {\r\n    id: 1,\r\n    question: \"Jak miała na imię dajmona Lee Scoresby'ego?\",\r\n    answer: \"Hester\"\r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Jaki tytuł arystokratyczny nosił ojciec Lyry?\",\r\n    answer: \"lord\"\r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"Stanislaus Grumman to wujek czy ojciec Willa Parry'ego?\",\r\n    answer: \"ojciec\"\r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"Dajmon pani Coulter to złota...?\",\r\n    answer: \"małpa\"\r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"Każdy panserbjorne własnoręcznie wykuwa swą duszę, czyli...\",\r\n    answer: \"pancerz\"\r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"Czy ojciec Coram i Serafina Pekkala mieli dzieci? (t/n)\",\r\n    answer: \"tak\"\r\n  },\r\n ];\r\n\r\nconst Animals = [\r\n  {\r\n    id: 1,\r\n    question: \"czy tygrysy mają pasy również na skórze?\",\r\n    answer: \"tak\"\r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"który ptak potrafi latać wstecz?\",\r\n    answer: \"koliber\"\r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"serce krewetki znajduje się w jej...\",\r\n    answer: \"głowie\"\r\n  },\r\n  {\r\n    id: 4,\r\n    question: \"co jest większe u strusia: oko czy mózg?\",\r\n    answer: \"oko\"\r\n  },\r\n  {\r\n    id: 5,\r\n    question: \"jak nazywa się mieszaniec, potomek lwa i tygrysicy?\",\r\n    answer: \"legrys\"\r\n  },\r\n  {\r\n    id: 6,\r\n    question: \"czy samicom renifera rośnie poroże?\",\r\n    answer: \"tak\"\r\n  },\r\n  {\r\n    id: 7,\r\n    question: \"jakie zwierzę robi kupę w kształcie sześcianów?\",\r\n    answer: \"wombat\"\r\n  },\r\n  {\r\n    id: 8,\r\n    question: \"które zwierzęta mają łaskotki: szczury czy chomiki?\",\r\n    answer: \"szczury\"\r\n  },\r\n  {\r\n    id: 9,\r\n    question: \"kto jest szybszy, gepard czy sokół wędrowny?\",\r\n    answer: \"sokół wędrowny\"\r\n  },\r\n  {\r\n    id: 10,\r\n    question: \"które papugi są najcięższe?\",\r\n    answer: \"kakapo\"\r\n  },\r\n  {\r\n    id: 11,\r\n    question: \"czy orki są mięsożerne?\",\r\n    answer: \"tak\"\r\n  },\r\n]\r\n\r\nexport default {Kosmos, JS, HisDarkMaterials, Animals};","import React, {useState} from 'react';\r\n\r\nimport ButtonsChoice from './ButtonsChoice';\r\nimport Question from './Question';\r\nimport Finish from './Finish';\r\nimport data from './questionData';\r\nimport './Main.scss';\r\n\r\nconst Game = () => {\r\n    const [category, setCategory] = useState('Kosmos');\r\n    const updateCategory = (name) => {\r\n        setCategory(name);\r\n    }\r\n\r\n    const items = data[category];\r\n\r\n//tutaj za pomocą klas zwijam komponent przywitalny Hello i rozwijam \r\n//komponent z właściwą grą - Question\r\n    const [isQuestion, setQuestion] = useState(false);\r\n    const [isHello, setHello] = useState(false);\r\n    const [btnChoiceField, setBtnChoiceField] = useState(false);\r\n    const toggleButton = () => {\r\n        setHello(true);\r\n        setQuestion(true);\r\n        setBtnChoiceField(true);\r\n    } \r\n\r\n// tu licznik punktów, który trzeba było tu wynieść, żeby się resetował\r\n    const [pointCounter, setPointCounter] = useState(0);\r\n\r\n//tu ustawiam licznik czasu\r\n    const [timeCounter, setTimeCounter] = useState(20);\r\n    const [isTimerActive, setTimerActive] = useState(false);\r\n    const startCounting = () => {\r\n        setTimerActive(true);\r\n        setTimeCounter(20);\r\n        console.log(timeCounter);\r\n    }\r\n    //setCounter ustawia counter na 15, setActive ustawia counter na \r\n    //aktywny lub nie, startCounting ustawia setActive na true\r\n\r\n    //tu za pomocą klasy rozwijam lub zwijam komponent Finish\r\n    const [isFinished, setFinished] = useState(false);\r\n    const endOfGame = () => {\r\n        setFinished(true);\r\n        setTimeCounter(-3);\r\n    }\r\n    const [tableLength, setTableLength] = useState(0);\r\n\r\n    const [backToGame, setBackToGame] = useState(true);\r\n    \r\n    const newStart = () => {\r\n        setQuestion(false);\r\n        setHello(false);\r\n        setFinished(false);\r\n        setBackToGame(true);\r\n        setPointCounter(0);\r\n        setBtnChoiceField(false);\r\n        setTimeCounter(-3);\r\n    }\r\n\r\n    return (\r\n        <div className='game-container'>\r\n            <ButtonsChoice \r\n                isHello={isHello} \r\n                setHello={setHello}\r\n                updateCategory={updateCategory}\r\n                setCategory={setCategory}\r\n                toggleButton={toggleButton}\r\n                setTimerActive={setTimerActive}\r\n                startCounting={startCounting}\r\n                setPointCounter={setPointCounter}\r\n                isFinished={isFinished}\r\n                backToGame={backToGame}\r\n                setTimeCounter={setTimeCounter}\r\n                btnChoiceField={btnChoiceField}\r\n                />\r\n            <Question \r\n                items={items}\r\n                // category={category}\r\n                isQuestion={isQuestion}\r\n                pointCounter={pointCounter} \r\n                setPointCounter={setPointCounter}\r\n                setTableLength={setTableLength}\r\n                timeCounter={timeCounter}\r\n                setTimeCounter={setTimeCounter}\r\n                isTimerActive={isTimerActive}\r\n                setTimerActive={setTimerActive}\r\n                startCounting={startCounting}\r\n                // zmienna i funkcja do wyświetlania Finishu\r\n                setFinished={setFinished}\r\n                isFinished={isFinished}\r\n                endOfGame={endOfGame}\r\n\r\n                />\r\n            <Finish\r\n                pointCounter={pointCounter} \r\n                isFinished={isFinished}\r\n                newStart={newStart}\r\n                tableLength={tableLength}\r\n            />\r\n            {/* <button className=\"btn-reset\" onClick={newStart}>RESET</button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <Game/>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      <div className=\"twinkle\"></div><div className=\"twinkle\"></div>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n\n//czemu czas nie zatrzymuje się, kiedy kończysz grę? tzn po zmianie kategorii pojawia się \"koniec czasu\" ;\n//trzeba przy kliknięciu na nową kategorię wyzerować wszystko, łącznie z timerem; tzn ustawić timer na 20\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}